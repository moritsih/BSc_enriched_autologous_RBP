{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BSc","provenance":[],"collapsed_sections":[],"mount_file_id":"12rzvHLUzhsOYIMGtH8HSVYkU-uU0QkXH","authorship_tag":"ABX9TyMr3fPK8sy8gRd4ZaltkSOn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#imports\n","import os \n","import numpy as np"],"metadata":{"id":"MhUQzSFUJDuq","executionInfo":{"status":"ok","timestamp":1646998197904,"user_tz":-60,"elapsed":5,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["a = np.array([1,2,3,4,5,6])\n","a[1-1:5]"],"metadata":{"id":"cDGSqdWrJQYd","executionInfo":{"status":"ok","timestamp":1646998214062,"user_tz":-60,"elapsed":4,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"a1945bc7-ba91-49ed-8f48-0ede64679d52","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3, 4, 5])"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["seq = \"AUGGAUGGAGAGAAUCACUCAGUGGUAUCUGAGUUUUUGUUUCUGGGACUCACUCAUUCAUGGGAGAUCCAGCUCCUCCUCCUAGUGUUUUCCUCUGUGCUCUAUGUGGCAAGCAUUACUGGAAACAUCCUCAUUGUGUUUUCUGUGACCACUGACCCUCACUUACACUCCCCCAUGUACUUUCUACUGGCCAGUCUCUCCUUCAUUGACUUAGGAGCCUGCUCUGUCACUUCUCCCAAGAUGAUUUAUGACCUGUUCAGAAAGCGCAAAGUCAUCUCCUUUGGAGGCUGCAUCGCUCAAAUCUUCUUCAUCCACGUCGUUGGUGGUGUGGAGAUGGUGCUGCUCAUAGCCAUGGCCUUUGACAGAUAUGUGGCCCUAUGUAAGCCCCUCCACUAUCUGACCAUUAUGAGCCCAAGAAUGUGCCUUUCAUUUCUGGCUGUUGCCUGGACCCUUGGUGUCAGUCACUCCCUGUUCCAACUGGCAUUUCUUGUUAAUUUAGCCUUCUGUGGCCCUAAUGUGUUGGACAGCUUCUACUGUGACCUUCCUCGGCUUCUCAGACUAGCCUGUACCGACACCUACAGAUUGCAGUUCAUGGUCACUGUUAACAGUGGGUUUAUCUGUGUGGGUACUUUCUUCAUACUUCUAAUCUCCUACGUCUUCAUCCUGUUUACUGUUUGGAAACAUUCCUCAGGUGGUUCAUCCAAGGCCCUUUCCACUCUUUCAGCUCACAGCACAGUGGUCCUUUUGUUCUUUGGUCCACCCAUGUUUGUGUAUACACGGCCACACCCUAAUUCACAGAUGGACAAGUUUCUGGCUAUUUUUGAUGCAGUUCUCACUCCUUUUCUGAAUCCAGUUGUCUAUACAUUCAGGAAUAAGGAGAUGAAGGCAGCAAUAAAGAGAGUAUGCAAACAGCUAGUGAUUUACAAGAGGAUCUCA\"\n","import math\n","\n","motif= np.array([[0.97, 0.01, 0.01, 0.01],\n","                   [0.97, 0.01, 0.01, 0.01],\n","                   [0.39, 0.2, 0.01, 0.39],\n","                   [0.97, 0.01, 0.01, 0.01],\n","                   [0.97, 0.01, 0.01, 0.01],\n","                   [0.58, 0.01, 0.4, 0.01],\n","                   [0.01, 0.2, 0.39, 0.39],\n","                   [0.97, 0.01, 0.01, 0.01],\n","                   [0.97, 0.01, 0.01, 0.01],\n","                   [0.97, 0.01, 0.01, 0.01]])\n","\n","b = []\n","for letter in [\"A\", \"C\", \"G\", \"U\"]:\n","    num = len([x for x in seq if x == letter])\n","    #b.append(num/len(seq))\n","    b.append(0.25)\n","\n","pssm = np.empty((motif.shape), dtype=np.float32)\n","\n","for i,line in enumerate(motif):\n","\n","    for k, num in enumerate(line):\n","\n","        pssm[i][k] = np.log2(np.divide(num,b[k]))\n","\n","pssm\n","        \n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yloat1QuN9-Z","executionInfo":{"status":"ok","timestamp":1646648571615,"user_tz":-60,"elapsed":15,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"33bf751f-18f5-497e-dbdc-18c59bd83f18"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.9560566 , -4.643856  , -4.643856  , -4.643856  ],\n","       [ 1.9560566 , -4.643856  , -4.643856  , -4.643856  ],\n","       [ 0.641546  , -0.32192808, -4.643856  ,  0.641546  ],\n","       [ 1.9560566 , -4.643856  , -4.643856  , -4.643856  ],\n","       [ 1.9560566 , -4.643856  , -4.643856  , -4.643856  ],\n","       [ 1.2141248 , -4.643856  ,  0.6780719 , -4.643856  ],\n","       [-4.643856  , -0.32192808,  0.641546  ,  0.641546  ],\n","       [ 1.9560566 , -4.643856  , -4.643856  , -4.643856  ],\n","       [ 1.9560566 , -4.643856  , -4.643856  , -4.643856  ],\n","       [ 1.9560566 , -4.643856  , -4.643856  , -4.643856  ]],\n","      dtype=float32)"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["#final_distributions[experiment][\"transcriptome\"].append(list((np.array(found_motifs[experiment][protein][\"transcriptome\"])-transcriptome_mean)/transcriptome_std))\n","rand_high = np.random.uniform(-4, 2, 10)\n","#rand_high = [[x] for x in rand_high]\n","rand = np.random.uniform(2, 4, 100)\n","rand = [[x] for x in rand]\n","# rand = background\n","# rand_high = autologous\n","found_motifs = {}\n","found_motifs[\"experiment\"] = {}\n","found_motifs[\"experiment\"][\"1\"] = {}\n","found_motifs[\"experiment\"][\"2\"] = {}\n","found_motifs[\"experiment\"][\"1\"][\"transcriptome\"] = rand_high\n","found_motifs[\"experiment\"][\"2\"][\"transcriptome\"] = rand_high\n","\n","x = {}\n","x[\"A\"] = {}\n","x[\"A\"][\"B\"] = []\n","mean = 0.5\n","std = 1.2\n","\n","x[\"A\"][\"B\"].append(list(((found_motifs[\"experiment\"][\"1\"][\"transcriptome\"] - mean)/std)))\n","x[\"A\"][\"B\"].append(list(((found_motifs[\"experiment\"][\"2\"][\"transcriptome\"] - mean)/std)))\n","\n","x[\"A\"][\"B\"]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Z8upJBtZ76a","executionInfo":{"status":"ok","timestamp":1646741450041,"user_tz":-60,"elapsed":250,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"1b5c21c6-d7a7-46c1-9011-2cadc0842931"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[-0.2262064482851356,\n","  -3.5456089462924796,\n","  0.3003379988838987,\n","  -0.13746067418529093,\n","  -1.164455770302889,\n","  -0.8063281357414009,\n","  -2.509911237903357,\n","  -3.5279490871490657,\n","  -1.621405927186993,\n","  -0.8736862736984693],\n"," [-0.2262064482851356,\n","  -3.5456089462924796,\n","  0.3003379988838987,\n","  -0.13746067418529093,\n","  -1.164455770302889,\n","  -0.8063281357414009,\n","  -2.509911237903357,\n","  -3.5279490871490657,\n","  -1.621405927186993,\n","  -0.8736862736984693]]"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["list = [[1,2,3],[4,5,3],[9,5,4]]\n","np.ravel(list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bYNgpRLrET7M","executionInfo":{"status":"ok","timestamp":1646829300314,"user_tz":-60,"elapsed":351,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"0d4bd77b-401e-4ac9-f89d-d17148495007"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3, 4, 5, 3, 9, 5, 4])"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["import random\n","import scipy.stats as stats\n","import numpy as np\n","\n","def binary_vs_averaged(bi_ls, bi_ls_ls, ranked=\"yes\", side=\"higher\"):\n","    if ranked == \"yes\":\n","        singles = []\n","        dists = []\n","        for i,element in enumerate(bi_ls_ls):\n","            ranks = stats.rankdata(element + bi_ls[i], method=\"average\")/(len(element)+1)\n","            singles.append(ranks[-1])\n","            dists.append(ranks[:-1])\n","        bi_ls = singles\n","        bi_ls_ls = dists\n","        \n","    bi_total = sum(bi_ls)\n","    dist = []\n","\n","    N=1*10**5\n","    hist = []\n","    for _ in range(N):\n","        total = 0\n","        for item in bi_ls_ls:\n","            chosen_one = random.choice(item)\n","            total += chosen_one\n","            hist.append(chosen_one)\n","        dist.append(total)\n","\n","    lower, equal, higher = 0,0,0\n","    for element in dist:\n","        if element > bi_total:\n","            higher += 1\n","        if element < bi_total:\n","            lower += 1\n","        if element == bi_total:\n","            equal += 1\n","\n","    if higher > lower:\n","        p_1 = lower/N + equal/N/2\n","        p_2 = p_1 *2\n","\n","    if higher < lower:\n","        p_1 = higher/N + equal/N/2\n","        p_2 = p_1 *2\n","\n","    if side == \"lower\":\n","        p_1 = lower/N + equal/N/2\n","        return p_1#, hist\n","\n","    if side == \"higher\":\n","        p_1 = higher/N + equal/N/2\n","        return p_1#, hist\n","\n","    return p_2#, hist\n","\n","\n","\n","rand_high = np.random.uniform(-4, 2, 10)\n","#rand_high = [[x] for x in rand_high]\n","rand = np.random.uniform(2, 4, 100)\n","rand = [[x] for x in rand]\n","# rand = background\n","# rand_high = autologous\n","x = {}\n","x[\"A\"] = {}\n","x[\"A\"][\"A\"] = rand_high\n","x[\"A\"][\"B\"] = rand\n","\n","\n","p2 = binary_vs_averaged(x[\"A\"][\"A\"], x[\"A\"][\"B\"], ranked=\"no\", side=\"higher\")\n","p2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G98J2ZIC9z1d","executionInfo":{"status":"ok","timestamp":1646736387623,"user_tz":-60,"elapsed":11607,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"274926de-9d9a-40c0-b973-878b3e46023d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":[""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aemwf-A1IMw1","executionInfo":{"status":"ok","timestamp":1646736327316,"user_tz":-60,"elapsed":295,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"cc62cf25-9a8d-472a-a587-c41dba9d6766"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["###############################################################################################################################################\n","# Script to set working directory to google drive\n","###############################################################################################################################################\n","\n","\n","# the base Google Drive directory\n","root_dir = \"/content/drive/MyDrive/\"\n","\n","# choose where you want your project files to be saved\n","project_folder = \"BSc/Code\"\n","\n","def create_and_set_working_directory(project_folder):  \n","\n","  # change the OS to use your project folder as the working directory\n","  os.chdir(root_dir + project_folder)\n","\n","  # create a test file to make sure it shows up in the right place\n","  !touch 'new_file_in_working_directory.txt'\n","  print('\\nYour working directory was changed to ' + root_dir + project_folder + '\\n\\nAn empty text file was created there.')\n","\n","  if input(\"Check working directory: File created? great! Delete txt file? y or n \") == \"y\":\n","    os.remove('new_file_in_working_directory.txt')\n","\n","create_and_set_working_directory(project_folder)\n","\n","from additional_code.read_MANE import *\n","\n","dict_MANE = dict_MANE\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ALk46iefz4UO","executionInfo":{"status":"ok","timestamp":1646312225477,"user_tz":-60,"elapsed":3295,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"ab1a4654-eb8e-44b0-df48-26fc42f966e3"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Your working directory was changed to /content/drive/MyDrive/BSc/Code\n","\n","An empty text file was created there.\n","Check working directory: File created? great! Delete txt file? y or n y\n"]}]},{"cell_type":"code","source":["###############################################################################################################################################\n","# FUNCTIONS THAT EXTRACT 1. PPMS FROM ATtRACT, 2. PPMS FROM HTSELEX\n","###############################################################################################################################################\n","\n","\n","def extract_attracMANE_for_FIMOt_ppm(attract_ppm):\n","\n","  dict_attract_ppms = {}\n","  with open(attract_ppm, \"r\") as f:\n","    for line in f:\n","        line = line.rstrip(\"\\n\").split(\"\\t\")\n","\n","        if len(line) == 2:\n","            counter = 0\n","            matrix_id = line[0][1:]\n","            length = int(line[1])\n","            dict_curr_PPM = {}\n","            continue\n","\n","        dict_curr_PPM[counter] = [float(x) for x in line]\n","        counter += 1\n","        if counter == length:\n","            dict_attract_ppms[matrix_id] = dict_curr_PPM\n","\n","    return dict_attract_ppms\n","\n","def extract_selex_ppm(selex_ppm, f_only_monomer=True):\n","    dict_htselex_ppms = {}\n","\n","    with open(selex_ppm, \"r\") as f:\n","        for line in f:\n","            line = line.rstrip(\"\\n\").split(\"\\t\")\n","\n","            if line[0].startswith(\">\"):\n","                counter = 0\n","                gene_id = line[0][1:]\n","                length = int(line[1])\n","                mer_status = line[3]\n","                dict_curr_PPM = {}\n","                continue\n","\n","            dict_curr_PPM[counter] = [float(x) for x in line]\n","            counter += 1\n","            if counter == length:\n","                if f_only_monomer and mer_status == \"dimeric\":\n","                    continue\n","                else:\n","                    dict_htselex_ppms[gene_id] = dict_curr_PPM\n","\n","    return dict_htselex_ppms\n","\n","data_path = os.path.abspath(\"DATA\")\n","\n","attract_ppms = extract_attract_ppm(os.path.join(data_path, \"ATtRACT_ppm.txt\"))\n","htselex_ppms = extract_selex_ppm(os.path.join(data_path, \"SELEX2020_ppm.txt\"))"],"metadata":{"id":"RqnW85O3OL_Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["###############################################################################################################################################\n","# FUNCTION GETTING NESTED DICT FROM ATtRACT DATABSE:\n","# EXPERIMENT:GENE_ID and GENE_ID:SEQUENCE\n","# + ONLY INCLUDES GENES THAT ARE AVAILABLE IN MANE DATABASE\n","\n","# IMPORTANT VARIABLE: attract_ppms\n","###############################################################################################################################################\n","\n","\n","def read_db_attract(experiment_name, f_organism, f_experiment, f_score=True, f_mutated=False):\n","\n","    dict_attract_db = {}\n","    data_path = os.path.abspath(\"DATA\")\n","    attract_path = os.path.join(os.path.join(data_path, \"ATtRACT_db.txt\"))\n","\n","    dict_ppms = extract_attract_ppm(os.path.join(data_path, \"ATtRACT_ppm.txt\"))\n"," \n","    with open(attract_path, \"r\") as dbfile:\n","        header_attract = dbfile.readline()\n","\n","        for line in dbfile:\n","            line = line.split(\"\\t\")\n","\n","            # Define database structure:\n","            Gene_name = line[0]\n","            Gene_id = line[1]\n","            Mutated = line[2]\n","            Organism = line[3]\n","            Motif = line[4]\n","            #Len = line[5]\n","            Experiment_description = line[6]\n","            Matrix_id = line [11]\n","            Score = line[12]\n","\n","            # Filter for variables defined above:\n","            if f_organism:\n","                if Organism != f_organism:\n","                    continue\n","            if f_experiment:\n","                if Experiment_description != f_experiment:\n","                    continue\n","            if f_score:\n","                if \"**\" not in Score:\n","                    continue\n","\n","            # Optional filters:\n","\n","            if f_mutated:\n","                if \"yes\" in Mutated:\n","                    continue\n","\n","            dict_attract_db[Gene_id] = Matrix_id\n","\n","        attract_ppms = dict(zip(dict_attract_db.keys(), dict_ppms.values()))\n","\n","        attract_ppms = {k:v for (k, v) in attract_ppms.items() if k in dict_MANE.keys()}\n","\n","    return attract_ppms\n","\n","attract_ppms = {}\n","attract_ppms[\"RNAcomp\"] = read_db_attract(\"RNAcompete\", \"Homo_sapiens\", \"RNAcompete\", f_score=True, f_mutated=False)\n","attract_ppms[\"SELEX\"] = read_db_attract(\"SELEX\", \"Homo_sapiens\", \"SELEX\", f_score=True, f_mutated=False)\n","\n","RNAcomp_ppm_num = len(attract_ppms[\"RNAcomp\"].keys())\n","SELEX_ppm_num = len(attract_ppms[\"SELEX\"].keys())\n","htselex_ppm_num = len(htselex_ppms.keys())\n","\n","print(f\">>> NUM OF ATTRACT RNAcomp MOTIFS (pre-filter): {RNAcomp_ppm_num}\\n\")\n","print(f\">>> NUM OF ATTRACT RNAcomp MOTIFS (pre-filter): {SELEX_ppm_num}\\n\")\n","print(f\">>> NUM OF HT-SELEX MOTIFS (pre-filter): {htselex_ppm_num}\\n\")"],"metadata":{"id":"hphR7KgZ2yQv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646312225478,"user_tz":-60,"elapsed":7,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"64d7707d-d963-4334-eed2-6818d7c6e358"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[">>> NUM OF ATTRACT RNAcomp MOTIFS (pre-filter): 77\n","\n",">>> NUM OF ATTRACT RNAcomp MOTIFS (pre-filter): 27\n","\n",">>> NUM OF HT-SELEX MOTIFS (pre-filter): 50\n","\n"]}]},{"cell_type":"code","source":["###############################################################################################################################################\n","# SPLIT THE WHOLE TRANSCRIPTOME INTO UTR3, UTR5, CDS AND FULL TRANSCRIPT\n","###############################################################################################################################################\n","\n","\n","subseqs = [\"UTR3\", \"UTR5\", \"CDS\", \"cDNA\"]\n","MANE_transcriptome = {}\n","for subseq in subseqs:\n","    MANE_transcriptome[subseq] = {}\n","    for id in dict_MANE.keys():\n","        MANE_transcriptome[subseq][id] = dict_MANE[id][subseq]\n"],"metadata":{"id":"w8B_PEh8Qrza"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["###############################################################################################################################################\n","# FILTER UTRS AND CDS FOR EMPTY/SHORT SEQUENCES;\n","# DETERMINE A CUTOFF FOR SEQUENCE LENGTH 20\n","###############################################################################################################################################\n","\n","cutoff = 20 # set cutoff (for sequence length of UTRs)\n","too_short = []\n","for subseq in subseqs:\n","    for k, v in MANE_transcriptome[subseq].items():\n","        if len(v) <= cutoff:\n","            too_short.append(k)\n","    MANE_transcriptome[subseq] = {k:v for (k,v) in MANE_transcriptome[subseq].items() if len(v) >= cutoff}\n","\n","subseqs = [\"UTR3\", \"UTR5\", \"CDS\", \"cDNA\"]\n","for subseq in subseqs:\n","    length = len(MANE_transcriptome[subseq].keys())\n","    print(f\">>> NUM OF {subseq} SEQS: {length}\")\n"],"metadata":{"id":"0fzSandEh3Qb","executionInfo":{"status":"ok","timestamp":1646312226357,"user_tz":-60,"elapsed":6,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c0fd78dd-9a8d-4388-86fc-70e94b1153f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[">>> NUM OF UTR3 SEQS: 18313\n",">>> NUM OF UTR5 SEQS: 17614\n",">>> NUM OF CDS SEQS: 18584\n",">>> NUM OF cDNA SEQS: 18584\n"]}]},{"cell_type":"code","source":["###############################################################################################################################################\n","# CHECK IN MOTIF DATA WHETHER CORRESPONDING SEQUENCE GOT FILTERED DUE TO LENGTH\n","###############################################################################################################################################\n","\n","def filter_motifs(attract_ppms, htselex_ppms, seq_too_short):\n","    exps = [\"RNAcomp\", \"SELEX\"]\n","\n","    for exp in exps:\n","        attract_ppms[exp] = {k:v for (k,v) in attract_ppms[exp].items() if k not in seq_too_short}\n","    \n","    htselex_ppms = {k:v for (k,v) in htselex_ppms.items() if k not in seq_too_short}\n","\n","\n","    RNAcomp_ppm_num = len(attract_ppms[\"RNAcomp\"].keys())\n","    SELEX_ppm_num = len(attract_ppms[\"SELEX\"].keys())\n","    htselex_ppm_num = len(htselex_ppms.keys())\n","\n","    print(f\">>> NUM OF ATTRACT RNAcomp MOTIFS (post-filter): {RNAcomp_ppm_num}\")\n","    print(f\">>> NUM OF ATTRACT RNAcomp MOTIFS (post-filter): {SELEX_ppm_num}\")\n","    print(f\">>> NUM OF HT-SELEX MOTIFS (post-filter): {htselex_ppm_num}\")\n","\n","\n","    return attract_ppms, htselex_ppms\n","\n","attract_ppms, htselex_ppms = filter_motifs(attract_ppms, htselex_ppms, too_short)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iHq5SYDIy4z4","executionInfo":{"status":"ok","timestamp":1646312226358,"user_tz":-60,"elapsed":6,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"outputId":"a027a67c-e6e7-4e61-d072-7b5d1f77d586"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[">>> NUM OF ATTRACT RNAcomp MOTIFS (post-filter): 73\n",">>> NUM OF ATTRACT RNAcomp MOTIFS (post-filter): 27\n",">>> NUM OF HT-SELEX MOTIFS (post-filter): 48\n"]}]},{"cell_type":"code","source":["###############################################################################################################################################\n","# CREATE SEQUENCE FILES FROM TRANSCRIPTOME\n","###############################################################################################################################################\n","def transcriptome_file(MANE_dict_original):\n","\n","    subseqs = [\"UTR3\", \"UTR5\", \"CDS\", \"cDNA\"]\n","\n","    \n","    transcriptome_3utr = \"fimo_transcriptome_3utr.txt\"\n","    transcriptome_5utr = \"fimo_transcriptome_5utr.txt\"\n","    transcriptome_cds = \"fimo_transcriptome_cds.txt\"\n","    transcriptome_full = \"fimo_transcriptome_full.txt\"\n","\n","    transcriptome_files = [transcriptome_3utr, \n","                           transcriptome_5utr,\n","                           transcriptome_cds,\n","                           transcriptome_full]\n","\n","    dir = os.path.join(\"FIMO_input\", \"sequences\")\n","\n","    for i in range(len(subseqs)):\n","        with open(os.path.join(dir, transcriptome_files[i]), \"w\") as f:\n","            for id, seq in MANE_dict_original[subseqs[i]].items():\n","                f.write(\">\" + id + \" \" + \"transcriptome_\" + subseqs[i] + \"\\n\" + seq + \"\\n\\n\")\n","\n","transcriptome_file(MANE_transcriptome)"],"metadata":{"id":"4SrpkmmLn4Xs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["###############################################################################################################################################\n","# FUNCTIONS THAT WRITE GENE_ID:SEQUENCE DICTIONARIES INTO MOTIF-INPUT FILE\n","# \"attract\"-parameter is set to True when ATtRACT dict is entered (important for setting the file name)\n","###############################################################################################################################################\n","\n","\n","#Required form for input motifs:\n","# MEME version (MEME Suite 5.4.1)\n","\n","# ALPHABET = RNA\n","\n","# Background letter frequencies\n","# fasta-get-markov from MANE human sequences\n","\n","# MOTIF Name/ID\n","\n","def fimo_motif_input(dict_ppms, attract=True, rnacomp=True):\n","\n","    if attract:\n","        if rnacomp:\n","            fimo_file = \"fimo_attract_rnacomp.txt\"\n","            exp = \"RNAcompete\"\n","        else:\n","            fimo_file = \"fimo_attract_selex.txt\"\n","            exp = \"SELEX\"\n","    else:\n","        fimo_file = \"fimo_htselex.txt\"\n","        exp = \"HT-SELEX\"\n","\n","\n","    dir = os.path.join(\"FIMO_input\", \"motifs\")\n","\n","    if not os.path.isdir(dir):\n","        os.mkdir(dir)\n","    \n","    open(os.path.join(dir, fimo_file), \"a\").close()\n","\n","\n","    with open(os.path.join(dir, fimo_file), \"w\") as f:\n","        f.write(\"MEME version 5.4.1\\n\\nALPHABET=ACGU\\n\")\n","\n","        for i in range(len(list(dict_ppms))):\n","        \n","            id = list(dict_ppms)[i]\n","            matrix = dict_ppms[id]\n","            len_matrix = len(matrix)\n","\n","            f.write(\"\\nMOTIF \" \n","                    + id \n","                    + \" \" \n","                    + exp\n","                    + \"\\nletter-probability matrix: alength= 4 \" \n","                    + \"w= \" \n","                    + str(len(matrix)-1) \n","                    + \"\\n\")\n","\n","            for k in range(len_matrix - 1):\n","                probabilities_list = matrix[k]\n","                f.write(\" \" + \" \".join(map(str, probabilities_list)) + \"\\n\")\n","\n","                if k+1 == len_matrix:\n","                    f.write(\"\\n\")\n","                    continue\n","\n","fimo_motif_input(attract_ppms[\"RNAcomp\"], attract=True, rnacomp=True)\n","fimo_motif_input(attract_ppms[\"SELEX\"], attract=True, rnacomp=False)\n","fimo_motif_input(htselex_ppms, attract=False, rnacomp=False)\n","\n"],"metadata":{"id":"ysQQibefDBjd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["###############################################################################################################################################\n","# SOME STATISTICS ON THE SEQUENCES; MEAN LENGTH; MIN AND MAX LENGTH\n","###############################################################################################################################################\n","import numpy as np\n","subseqs = [\"UTR3\", \"UTR5\", \"CDS\", \"cDNA\"]\n","\n","seq_length = {}\n","lengths = []\n","\n","for subseq in subseqs:\n","    seq_length[subseq] = {k:len(v) for (k,v) in MANE_transcriptome[subseq].items()}\n","\n","stat_dict = {}\n","\n","for subseq in subseqs:\n","    stat_dict[subseq] = {}\n","    stat_dict[subseq][\"mean\"] = np.mean(np.asarray(list(seq_length[subseq].values())))\n","    stat_dict[subseq][\"min\"] = np.min(np.asarray(list(seq_length[subseq].values())))\n","    stat_dict[subseq][\"max\"] = np.max(np.asarray(list(seq_length[subseq].values())))\n","    stat_dict[subseq][\"median\"] = np.median(np.asarray(list(seq_length[subseq].values())))\n","    stat_dict[subseq][\"sum\"] = np.sum(np.asarray(list(seq_length[subseq].values())))\n","\n","\n","exps = [\"RNAcomp\", \"SELEX\"]\n","ppm_mean_len = {}\n","ppm_lengths = []\n","for exp in exps:\n","    for i in range(len(list(attract_ppms[exp].values()))):\n","        ppm_lengths.append(len(list(attract_ppms[\"RNAcomp\"].values())[i]))\n","    ppm_mean_len[exp] = np.mean(ppm_lengths)\n","\n","rnacomp_mean_len = ppm_mean_len[\"RNAcomp\"]\n","\n","tests = stat_dict[\"CDS\"][\"sum\"]/rnacomp_mean_len\n","p_value = 1e-4/tests\n"],"metadata":{"id":"XJHzppCJIMJ5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(stat_dict[\"cDNA\"])"],"metadata":{"id":"gv5twV5FmZQk","executionInfo":{"status":"ok","timestamp":1646312298155,"user_tz":-60,"elapsed":250,"user":{"displayName":"Moritz","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17304403534104988241"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bfbbce7f-8e66-44fa-bd39-e5e9ace7165a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'mean': 3716.5557468790357, 'min': 180, 'max': 109224, 'median': 2970.0, 'sum': 69068472}\n"]}]},{"cell_type":"code","source":["#UNUSED CODE BELOW"],"metadata":{"id":"4lOyP8yimbwg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ###############################################################################################################################################\n","# # EXTRACTION OF CDS, 3UTR AND 5UTR FROM MANE + INPUT FILE CREATION\n","# ###############################################################################################################################################\n","\n","# MANE_RBPS = {}\n","# MANE_RBPS[\"RNAcomp\"] = {}\n","# MANE_RBPS[\"SELEX\"] = {}\n","# MANE_RBPS[\"HTSELEX\"] = {}\n","\n","# MANE_RBPS[\"RNAcomp\"][\"UTR3\"] = {}\n","# MANE_RBPS[\"RNAcomp\"][\"UTR5\"] = {}\n","# MANE_RBPS[\"RNAcomp\"][\"CDS\"] = {}\n","# MANE_RBPS[\"RNAcomp\"][\"cDNA\"] = {}\n","\n","# MANE_RBPS[\"SELEX\"][\"UTR3\"] = {}\n","# MANE_RBPS[\"SELEX\"][\"UTR5\"] = {}\n","# MANE_RBPS[\"SELEX\"][\"CDS\"] = {}\n","# MANE_RBPS[\"SELEX\"][\"cDNA\"] = {}\n","\n","# MANE_RBPS[\"HTSELEX\"][\"UTR3\"] = {}\n","# MANE_RBPS[\"HTSELEX\"][\"UTR5\"] = {}\n","# MANE_RBPS[\"HTSELEX\"][\"CDS\"] = {}\n","# MANE_RBPS[\"HTSELEX\"][\"cDNA\"] = {}\n","\n","# for protein in MANE_rbps_attract_rnacomp.keys():\n","#     MANE_RBPS[\"RNAcomp\"][\"CDS\"][protein] = MANE_rbps_attract_rnacomp[protein][\"CDS\"]\n","#     MANE_RBPS[\"RNAcomp\"][\"UTR3\"][protein] = MANE_rbps_attract_rnacomp[protein][\"UTR3\"]\n","#     MANE_RBPS[\"RNAcomp\"][\"UTR5\"][protein] = MANE_rbps_attract_rnacomp[protein][\"UTR5\"]\n","#     MANE_RBPS[\"RNAcomp\"][\"cDNA\"][protein] = MANE_rbps_attract_rnacomp[protein][\"cDNA\"]\n","\n","# for protein in MANE_rbps_attract_selex.keys():\n","#     MANE_RBPS[\"SELEX\"][\"CDS\"][protein] = MANE_rbps_attract_selex[protein][\"CDS\"]\n","#     MANE_RBPS[\"SELEX\"][\"UTR3\"][protein] = MANE_rbps_attract_selex[protein][\"UTR3\"]\n","#     MANE_RBPS[\"SELEX\"][\"UTR5\"][protein] = MANE_rbps_attract_selex[protein][\"UTR5\"]\n","#     MANE_RBPS[\"SELEX\"][\"cDNA\"][protein] = MANE_rbps_attract_selex[protein][\"cDNA\"]\n","\n","# for protein in MANE_rbps_htselex.keys():\n","#     MANE_RBPS[\"HTSELEX\"][\"CDS\"][protein] = MANE_rbps_htselex[protein][\"CDS\"]\n","#     MANE_RBPS[\"HTSELEX\"][\"UTR3\"][protein] = MANE_rbps_htselex[protein][\"UTR3\"]\n","#     MANE_RBPS[\"HTSELEX\"][\"UTR5\"][protein] = MANE_rbps_htselex[protein][\"UTR5\"]\n","#     MANE_RBPS[\"HTSELEX\"][\"cDNA\"][protein] = MANE_rbps_htselex[protein][\"cDNA\"]\n","\n","# ##############################################################################\n","\n","# # important variable: MANE_RBPS\n","# # contains all input sequences in nested dictionary\n","\n","# ##############################################################################\n","\n","# # creation of input files (fasta format)\n","\n","# def background_input_file(MANE_dict):\n","\n","#     exps = [\"RNAcomp\", \"SELEX\", \"HTSELEX\"]\n","#     subseqs = [\"UTR3\", \"UTR5\", \"CDS\", \"cDNA\"]\n","\n","#     dir = os.path.join(\"FIMO_input\", \"sequences\")\n","\n","#     CDS = [\"fimo_sequences_RNAcomp_CDS.txt\",\n","#                 \"fimo_sequences_SELEX_CDS.txt\",\n","#                     \"fimo_sequences_HTSELEX_CDS.txt\"]\n","\n","#     UTR3 = [\"fimo_sequences_RNAcomp_3UTR.txt\",\n","#                 \"fimo_sequences_SELEX_3UTR.txt\",\n","#                     \"fimo_sequences_HTSELEX_3UTR.txt\"]\n","\n","#     UTR5 = [\"fimo_sequences_RNAcomp_5UTR.txt\",\n","#                 \"fimo_sequences_SELEX_5UTR.txt\",\n","#                     \"fimo_sequences_HTSELEX_5UTR.txt\"]\n","\n","#     cDNA = [\"fimo_sequences_RNAcomp_full.txt\",\n","#                 \"fimo_sequences_SELEX_full.txt\",\n","#                     \"fimo_sequences_HTSELEX_full.txt\"]\n","\n","#     filenames = [CDS, UTR3, UTR5, cDNA]\n","#     output_files = {}\n","\n","#     for i,exp in enumerate(exps):\n","#         output_files[exp] = {}\n","#         for idx,subseq in enumerate(subseqs):\n","#             output_files[exp][subseq] = filenames[idx][i]\n","\n","#             with open(os.path.join(dir, output_files[exp][subseq]), \"w\") as f:\n","#                 for ID,seq in MANE_RBPS[exp][subseq].items():\n","#                     f.write(\">\" + ID + \" \" + exp + \"\\n\" + seq + \"\\n\\n\")\n","\n","\n","    \n","\n","# background_input_file(MANE_RBPS)"],"metadata":{"id":"5WANb8LamZZL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ###############################################################################################################################################\n","# # SPLITTING MANE DATABASE INTO PARTS SO ONLY CERTAIN SEQUENCES COMING FROM\n","# # OUR EXPERIMENTS ARE INCLUDED\n","# ###############################################################################################################################################\n","\n","# # RBP sequences in MANE = those sequences in MANE that are also in attract/selex\n","\n","# MANE_rbps_attract_rnacomp = {k:v for (k,v) in dict_MANE.items() if k in attract_ppms[\"RNAcomp\"].keys()}\n","# MANE_rbps_attract_selex = {k:v for (k,v) in dict_MANE.items() if k in attract_ppms[\"SELEX\"].keys()}\n","# MANE_rbps_htselex = {k:v for (k,v) in dict_MANE.items() if k in htselex_ppms.keys()}\n","\n","# # for key in MANE_rbps_attract_rnacomp.keys():\n","# #     if key in MANE_rbps_attract_selex.keys():\n","# #         print(f\"{key} is overlapping\")"],"metadata":{"id":"LYtodo2PmhEB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"Fm3C3mikdu15"},"execution_count":null,"outputs":[]}]}